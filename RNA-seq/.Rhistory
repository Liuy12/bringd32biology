1,  3,  0,  0,  0,  0,  0,  0,  0,  4,  3,  8,
4,  0,  0,  0, 12, 12,  0,  1,  7,  0,  3,  2), nrow = 4, ncol = 12, byrow = T)
rownames(PWM_TEAD1) <- c('A', 'C', 'G', 'T')
PWM_TEAD1 <- PWM(PWM_TEAD1)
PWM_TEAD1 <- matrix(as.integer(c( 1, 9, 0, 12,  0,  0,  0,  0,  5,  1,  2,  0,
6,  0, 12,  0,  0,  0, 12, 11,  0,  7,  4,  2,
1,  3,  0,  0,  0,  0,  0,  0,  0,  4,  3,  8,
4,  0,  0,  0, 12, 12,  0,  1,  7,  0,  3,  2)), nrow = 4, ncol = 12, byrow = T)
rownames(PWM_TEAD1) <- c('A', 'C', 'G', 'T')
PWM_TEAD1 <- PWM(PWM_TEAD1)
PWM_TEAD1
CCL2_fasta <- readDNAStringSet('Downloads/CCL2.fasta', use.names = T)
hits <- matchPWM(PWM_TEAD1, CCL2_fasta[[1]], with.score = TRUE)
hits
hits <- matchPWM(PWM_TEAD1, CCL2_fasta[[1]], with.score = TRUE, min.score = '90%')
hits
PWM_TEAD1 <- matrix(as.integer(c( 1, 9, 0, 12,  0,  0,  0,  0,  5,  1,  2,  0,
6,  0, 12,  0,  0,  0, 12, 11,  0,  7,  4,  2,
1,  3,  0,  0,  0,  0,  0,  0,  0,  4,  3,  8,
4,  0,  0,  0, 12, 12,  0,  1,  7,  0,  3,  2)), nrow = 4, ncol = 12, byrow = T)
rownames(PWM_TEAD1) <- c('A', 'C', 'G', 'T')
PWM_TEAD1 <- PWM(PWM_TEAD1)
library(Biostrings)
PWM_TEAD1
CCL2_fasta <- readDNAStringSet('Downloads/CCL2.fasta', use.names = T)
hits <- matchPWM(PWM_TEAD1, CCL2_fasta[[1]], with.score = TRUE, min.score = '90%')
hits
hits <- matchPWM(PWM_TEAD1, CCL2_fasta[[1]], with.score = TRUE, min.score = '80%')
hits
CCL2_fasta <- readDNAStringSet('Downloads/test.fasta.rtf', use.names = T)
CCL2_fasta <- readDNAStringSet('Downloads/test.fasta.rtf', use.names = T)
CCL2_fasta <- readDNAStringSet('Downloads/test.fasta.rtf', use.names = T)
CCL2_fasta <- readDNAStringSet('Downloads/test.fasta', use.names = T)
CCL2_fasta <- readDNAStringSet('Downloads/test.fasta.rtf', use.names = T)
library(Biostrings)
CCL2_fasta <- readDNAStringSet('Desktop/TFBScode/CCL2_human.fasta', use.names = T)
PWM_TEAD1 <- matrix(as.integer(c( 1, 9, 0, 12,  0,  0,  0,  0,  5,  1,  2,  0,
6,  0, 12,  0,  0,  0, 12, 11,  0,  7,  4,  2,
1,  3,  0,  0,  0,  0,  0,  0,  0,  4,  3,  8,
4,  0,  0,  0, 12, 12,  0,  1,  7,  0,  3,  2)), nrow = 4, ncol = 12, byrow = T)
rownames(PWM_TEAD1) <- c('A', 'C', 'G', 'T')
#### Calculate Position weight matrix that will be used for pattern matching
PWM_TEAD1 <- PWM(PWM_TEAD1)
# PWM_TEAD1 <- PWM_TEAD1 + 1
# PWM_TEAD1 <- PWM_TEAD1/apply(PWM_TEAD1, 2, sum)
# PWM_TEAD1 <- log(PWM_TEAD1/0.25)
hits <- matchPWM(PWM_TEAD1, CCL2_fasta[[1]], with.score = TRUE, min.score = '90%')
hits
hits <- matchPWM(PWM_TEAD1, CCL2_fasta[[1]], with.score = TRUE, min.score = '80%')
hits
CCL2_fasta_human <- readDNAStringSet('Desktop/TFBScode/CCL2_human.fasta', use.names = T)
CCL2_fasta_mouse <- readDNAStringSet('Desktop/TFBScode/CCL2.fasta', use.names = T)
CCL2_fasta_human <- readDNAStringSet('Desktop/TFBScode/CCL2_human.fasta', use.names = T)
CCL2_fasta_mouse <- readDNAStringSet('Desktop/TFBScode/CCL2.fasta', use.names = T)
hits_human <- matchPWM(PWM_TEAD1, CCL2_fasta_human[[1]], with.score = TRUE, min.score = '90%')
hits_mouse <- matchPWM(PWM_TEAD1, CCL2_fasta_mouse[[1]], with.score = TRUE, min.score = '90%')
hits_mouse
hits_human
hits_human <- matchPWM(PWM_TEAD1, CCL2_fasta_human[[1]], with.score = TRUE, min.score = '85%')
hits_mouse <- matchPWM(PWM_TEAD1, CCL2_fasta_mouse[[1]], with.score = TRUE, min.score = '85%')
hits_human
hits_mouse
par(mfrow = c(3,3))
for(i in 1:9){
plot(1:i,1:i)
}
par(mfrow = c(3,3), mar = c(3,2,2,1))
for(i in 1:9){
plot(1:i,1:i)
}
par(mfrow = c(3,3), mar = c(2,2,1,1))
for(i in 1:9){
plot(1:i,1:i)
}
load("/Users/yuanhangliu/Google Drive/Lehmandata/data.RData")
head(miRNA_orig_log_norm)
head(miRNA_orig)
hist(miRNA_orig[,1])
?hist
hist(miRNA_orig[,1], xlim = c(0,10))
hist(miRNA_orig[,1], xlim = c(0,10), breaks=1000)
hist(miRNA_orig[,1], xlim = c(0,100), breaks=1000)
hist(miRNA_orig[,1], xlim = c(0,100), breaks=10000)
hist(miRNA_orig[,1], xlim = c(0,10), breaks=10000)
quantile(miRNA_orig[,1])
load("~/Dropbox/gitrepository/MBDDiff/data/PromoterCount.rdata")
ls()
load("~/Dropbox/gitrepository/MBDDiff/data/Organisms.rdata")
ls(all.names = T)
rm(.Random.seed)
ls(all.names = T)
save.image('Dropbox/gitrepository/MBDDiff/data/Organisms.rdata')
load("~/Dropbox/gitrepository/MBDDiff/data/PromoterCount.rdata")
head(Promoter)
head(Background)
load("~/Dropbox/gitrepository/MBDDiff/data/Organisms.rdata")
str(Organisms)
source('http://www.bioconductor.org/biocLite.R')
biocLite('XBSeq')
install.packages("~/Dropbox/gitrepository/MBDDiff_0.99.0.tar.gz", repos = NULL, type = "source")
library(MBDDiff)
ShowAvailableOrg()
ShowAvailableOrg()[,2]
temp <- ShowAvailableOrg()
temp
temp <- data("Organisms")
temp
dataMat <- read.table('Google Drive/Lehmandata/microarray analysis/data/Neuron_All.txt', header = T)
dataMat <- read.table('Google Drive/Lehmandata/microarray analysis/data/Neuron_All.txt', header = T, row.names = NULL)
head(dataMat)
str(dataMat)
write.csv(dataMat, file = 'Desktop/test.csv', quote = F, sep = ',', row.names = F)
library('DESeq2')
?nbinomWaldTest
dds <- makeExampleDESeqDataSet()
dds <- estimateSizeFactors(dds)
dds <- estimateDispersions(dds)
dds <- nbinomWaldTest(dds)
res <- results(dds)
res
746.95*6.54
dataMat <- read.delim('Google Drive/Lehmandata/microarray analysis/data/Neuron_All.txt')
dataMat <- aggregate(dataMat[-1], dataMat[1], median)
dataMat <- t(dataMat)
write.table(dataMat, 'Desktop/Neuron_exprs.txt', sep = '\t', quote = F)
write.csv(dataMat, 'Desktop/Neuron_exprs.txt', quote = F)
write.csv(dataMat, 'Desktop/Neuron_exprs.csv', quote = F)
write.csv(dataMat, 'Desktop/Neuron_exprs.csv', quote = F, col.names = F)
write.csv(dataMat, 'Desktop/Neuron_exprs.csv', quote = F, col.names = F)
head(colnames(dataMat))
colnames(dataMat) <- dataMat[1,]
dataMat <- dataMat[-1,]
View(dataMat)
write.csv(dataMat, 'Desktop/Neuron_exprs.csv', quote = F)
load("/Users/yuanhangliu/Google Drive/Lehmandata/data.RData")
dim(dataMat)
dim(dataMatrix)
View(dataMatrix)
View(dataMatrix)
temp <- read.delim('Google Drive/Lehmandata/microarray analysis/data/NeuronRNA_GExFinalReport_NewFormat1.txt', skip = 8)
head(temp)
temp1 <- dataMatrix
head(rownames(temp11))
head(rownames(temp1]))
head(rownames(temp1))
dim(temp)
dim(tmep1)
dim(temp1)
temp1 <- cbind(temp$TargetID, temp1)
dataMat <- read.delim('Google Drive/Lehmandata/microarray analysis/data/Neuron_All.txt')
dataMat <- aggregate(dataMat[-1], dataMat[1], median)
dataMat <- t(dataMat)
colnames(dataMat) <- dataMat[1,]
dataMat <- dataMat[-1,]
write.csv(dataMat[,1:200], 'Desktop/Neuron_exprs.csv', quote = F)
con <- dbConnect(drv="SQLite", dbname="NeuronExprs.db");
library(RSQLite);
con <- dbConnect(drv="SQLite", dbname="NeuronExprs.db");
?"dbConnect"
con <- RSQLite::dbConnect(drv="SQLite", dbname="NeuronExprs.db");
con <- dbConnect(drv="RSQLite", dbname="NeuronExprs.db");
con <- dbConnect(drv=SQLite(), dbname="NeuronExprs.db");
con
dbListTables(con);
con <- dbConnect(drv=SQLite(), dbname="NeuronExprs.db");
dbWriteTable(conn = db, name = "Exprs", value = "Desktop/Neuron_exprs.csv",
row.names = FALSE, header = TRUE)
dbWriteTable(conn = con, name = "Exprs", value = "Desktop/Neuron_exprs.csv",
row.names = FALSE, header = TRUE)
dbListTables(con);
dbListFields(con,'A1BG');
dbWriteTable(conn = con, name = "Exprs", value = "Desktop/Neuron_exprs.csv",
row.names = TRUE, header = TRUE)
con <- dbConnect(drv=SQLite(), dbname="NeuronExprs.db");# load csv file into the databasedbWriteTable(conn = con, name = "Exprs", value = "Desktop/Neuron_exprs.csv",             row.names = TRUE, header = TRUE)
con <- dbConnect(drv=SQLite(), dbname="NeuronExprs.db")
dbWriteTable(conn = con, name = "Exprs", value = "Desktop/Neuron_exprs.csv",
row.names = TRUE, header = TRUE)
rm(con)
con <- dbConnect(drv=SQLite(), dbname="NeuronExprs.db")
# load csv file into the database
dbWriteTable(conn = con, name = "Exprs", value = "Desktop/Neuron_exprs.csv",
row.names = TRUE, header = TRUE)
?"dbWriteTable"
dbWriteTable(conn = con, name = "Exprs1", value = "Desktop/Neuron_exprs.csv",
row.names = TRUE, header = TRUE)
dbWriteTable(conn = con, name = "Exprs1", value = "Desktop/Neuron_exprs.csv",             row.names = TRUE, col.names = TRUE)
dbWriteTable(conn = con, name = "Exprs", value = "Desktop/Neuron_exprs.csv",
row.names = TRUE, col.names = TRUE)
dbWriteTable(conn = con, name = "Exprs", value = "Desktop/Neuron_exprs.csv",
row.names = TRUE, header = FALSE)
dbWriteTable(conn = con, name = "Exprs1", value = "Desktop/Neuron_exprs.csv",
row.names = TRUE, header = FALSE)
row.names = TRUE, header = TRUE)
dbWriteTable(conn = con, name = "Exprs1", value = "Desktop/Neuron_exprs.csv",
row.names = TRUE, header = TRUE)
dbListTables(con);
dbListFields(con,'Exprs');
dat <- dbGetQuery( con,'select * from Exprs' )
head(dat)
View(dat)
dat <- dbGetQuery( con,'select A1BG, A1CF, A26C3 from Exprs' )
View(dat)
View(dataMat)
dat.lm <- lm(A1BG ~ A1CF + A26C3,data=dat);
summary(dat.lm)
par(mfrow=c(1,2));plot(dat.lm,which=c(1:2))
install.packages("plot3Drgl")
options(width=300)
rawdeid <- read.delim('deid_bmi_temp.csv',head=T);
rawdeid <- read.delim('deid_bmi_temp.csv',head=T);
rawdeid <- read.delim('deid_bmi_temp.csv',head=T);
getwd()
rawdeid <- read.delim('Dropbox/gitrepository/TSCI-5050/deid_bmi_temp.csv',head=T);
rawdeid$AGE <- rawdeid$AGE/365;
rawdeid$BMI <- as.numeric(as.character(rawdeid$BMI));
rawdeid$TEMPERATURE <- as.numeric(as.character(rawdeid$TEMPERATURE));
rawdeid$BMI <- as.numeric(as.character(rawdeid$BMI));
rawdeid$BMI_BIN <- factor(sign(scale(rawdeid$BMI,center = 28.6)),labels=c('low','mid','hi'));
levels(rawdeid$BMI_BIN) <- c('low','hi','hi');
levels(rawdeid$SEX)<-c('f','m','m');
levels(rawdeid$RACE)<-ifelse((xx<-levels(rawdeid$RACE))%in%c('other','black','white'),xx,'other')
rawdeid$Y[rawdeid$SEX=='f']<- with(subset(rawdeid,SEX=='f'),-1+BMI/2.5+0.01*TEMPERATURE+rnorm(487178));
rawdeid$Y[rawdeid$SEX!='f']<- with(subset(rawdeid,SEX!='f'),17+0.007*TEMPERATURE-.002*AGE^2+rnorm(805297-487178));
rawdeid$Y[rawdeid$RACE=='black'&rawdeid$SEX=='f'] <- with(subset(rawdeid,RACE=='black'&SEX=='f'),Y+5-BMI/2-AGE^2*.001);
rawdeid.sam <- subset(rawdeid, PATIENT_NUM %in% unique(c(sample(PATIENT_NUM,200),sample(unique(PATIENT_NUM[SEX=='f'&RACE=='black']),30))));
stripchart(Y~BMI_BIN,subset(rawdeid.sam,BMI<90),method = 'jitter',jitter = 0.2,col=c('#FF000010','#0000FF10'),vertical = T,pch='.',cex=8)
foo <- Y ~ (x1 + x2 + x3)*x4
foo
str(foo)
update(foo, .~.)
?update
t.test(Y~BMI_BIN,subset(rawdeid.sam,BMI<90));
stripchart(Y~SEX,subset(rawdeid.sam,BMI<90),method = 'jitter',jitter = 0.2, col=c('#FF000010','#0000FF10'),vertical = T,pch='.',cex=8)
```
t.test(Y~SEX,subset(rawdeid.sam,BMI<90));
summary(lm(Y~SEX,subset(rawdeid.sam,BMI<90)));
update(lm(Y~SEX,subset(rawdeid.sam,BMI<90)));
class(foo)
bar <- update(foo, .~., -x3:x4 + x5)
bar
update(foo, .~.)
update(foo, .~., -x3:x4 + x5)
update(foo, .~., - x3:x4 + x5)
update(foo, . ~ ., - x3:x4 + x5)
foo
update(foo, . ~ .)
update(foo, . ~ ., new = - x3:x4 + x5)
update(foo, . ~ ., - x3:x4 + x5)
update(foo, .~., - x3:x4 + x5)
update(foo)
update(foo, .~. - x3:x4 + x5)
install.packages('plot3Drgl')
library(plot3Drgl)
options(width=300)
rawdeid <- read.delim('deid_bmi_temp.csv',head=T);
rawdeid <- read.delim('Dropbox/gitrepository/TSCI-5050/deid_bmi_temp.csv',head=T);
rawdeid$AGE <- rawdeid$AGE/365;
rawdeid$BMI <- as.numeric(as.character(rawdeid$BMI));
rawdeid$TEMPERATURE <- as.numeric(as.character(rawdeid$TEMPERATURE));
rawdeid$BMI <- as.numeric(as.character(rawdeid$BMI));
rawdeid$BMI_BIN <- factor(sign(scale(rawdeid$BMI,center = 28.6)),labels=c('low','mid','hi'));
levels(rawdeid$BMI_BIN) <- c('low','hi','hi');
levels(rawdeid$SEX)<-c('f','m','m');
levels(rawdeid$RACE)<-ifelse((xx<-levels(rawdeid$RACE))%in%c('other','black','white'),xx,'other')
rawdeid$Y[rawdeid$SEX=='f']<- with(subset(rawdeid,SEX=='f'),-1+BMI/2.5+0.01*TEMPERATURE+rnorm(487178));
rawdeid$Y[rawdeid$SEX!='f']<- with(subset(rawdeid,SEX!='f'),17+0.007*TEMPERATURE-.002*AGE^2+rnorm(805297-487178));
rawdeid$Y[rawdeid$RACE=='black'&rawdeid$SEX=='f'] <- with(subset(rawdeid,RACE=='black'&SEX=='f'),Y+5-BMI/2-AGE^2*.001);
rawdeid.sam <- subset(rawdeid, PATIENT_NUM %in% unique(c(sample(PATIENT_NUM,200),sample(unique(PATIENT_NUM[SEX=='f'&RACE=='black']),30))));
stripchart(Y~BMI_BIN,subset(rawdeid.sam,BMI<90),method = 'jitter',jitter = 0.2,col=c('#FF000010','#0000FF10'),vertical = T,pch='.',cex=8)
library(plot3Drgl); #library(knitr);
yVbmi <- matrix(c(0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,1),nrow=4,byrow = T);
yVage <- matrix(c(1,0,0,0,0,0,1,0,0,-1,0,0,0,0,0,1),nrow=4,byrow=T);
with(subset(rawdeid.sam,BMI<90),
scatter3Drgl(AGE,BMI,Y,colvar=as.numeric(SEX),
col=c('#FF000010','#0000FF10'),xlab='Age',ylab='BMI',zlab='Y',FOV=0));
browseURL(paste("file://", writeWebGL(dir=tempdir(), width=700), sep=""));
par3d(userMatrix=yVage);
par3d(userMatrix=yVbmi);
?step
dataMat <- read.delim('Google Drive/Lehmandata/Chipseq/res_03102016/CEAS_res_TCF7L2vsinput/TCF7L2.xls', skip = 17)
dataMat_sel <- dataMat[(which(apply(dataMat[,6:9], 1, min) < 50000)),]
write.table(dataMat_sel, 'Google Drive/Lehmandata/Chipseq/res_03102016/CEAS_res_TCF7L2vsinput/TCF7L2_50kb.txt', sep = '\t', row.names = F)
data_DE <- read.delim('Dropbox/research/DNAmethylation/RecvsNonrec/Normalized_mat_DE.txt')
library(gplots)
heatmap.2()
heatmap.2
heatmap.my <- function(Exprs, sel=F, thres_mean, thres_var, numbreaks=100, col = c("blue","white","red"),
breakratio = c(2,1,2), colsidebar, Colv=F, Rowv=T, scale= 'row', labRow=F,
labCol=F, dendrogram = 'row'){
suppressPackageStartupMessages(invisible(require('gplots', quietly=TRUE)))
if(labRow)
labRow <- rownames(Exprs)
if(labCol)
labCol <- colnames(Exprs)
if(sel){
gene_mean <- apply(Exprs,1,mean)
gene_var <- apply(Exprs,1,var)
Exprs <- Exprs[gene_mean>thres_mean & gene_var>thres_var,]
}
if(scale == 'row')
Exprs_scale <- t(scale(t(Exprs)))
else
Exprs_scale <- Exprs
# lmat is a matrix describing how the screen is to be broken up. By default, heatmap.2 divides the screen into a four element grid, so lmat is a 2x2 matrix.
# The number in each element of the matrix describes what order to plot the next four plots in. Heatmap.2 plots its elements in the following order:
# 1 Heatmap,
# 2 Row dendrogram,
# 3 Column dendrogram,
# 4 Key
if(missing(colsidebar)){
lmat <- rbind(c(0,4), c(0,3), c(2,1))
lwid <- c(1,4)
lhei <- c(1,0.1,4)
if(class(Colv) == 'dendrogram'){
lhei <- c(1,1,4)
dendrogram <- 'both'
}
}
else{
if(class(Colv) == 'dendrogram'){
# 4 is column dendrogram, 5 is key, 1 is colcolorkey
lmat <- rbind(c(0,5),c(0,4), c(3,2),c(0,1))
lwid <- c(1,4)
lhei <- c(1,1, 4,0.25)
dendrogram <- 'both'
}
else{
if(Colv){
lmat <- rbind(c(0,5),c(0,4), c(3,2),c(0,1))
lwid <- c(1,4)
lhei <- c(1,1, 4,0.25)
dendrogram <- 'both'
}
lmat <- rbind(c(0,5),c(0, 1), c(3,2),c(0,4))
lwid <- c(1,4)
lhei <- c(1,0.25,4,0.1)
}
}
rg <- quantile(Exprs_scale,na.rm=T)
rg_diff <- rg[4]-rg[2]
rg_max <- max(abs(rg))
Exprs_sd <- sd(Exprs_scale)
Exprs_mean <- mean(Exprs_scale)
if(rg_max > max(abs(c(Exprs_mean + 3*Exprs_sd, Exprs_mean - 3*Exprs_sd)))){
rg_iqr <- max(abs(c(rg[2], rg[4])))
bp <- c((breakratio[1]/sum(breakratio))*rg_diff - rg_iqr, rg_iqr - (breakratio[3]/sum(breakratio))*rg_diff)
bk <- c(seq(-rg_max, -rg_iqr, length= numbreaks), seq(-rg_iqr,bp[1],length = numbreaks), seq(bp[1],bp[2],length=numbreaks),seq(bp[2],rg_iqr,length=numbreaks),
seq(rg_iqr, rg_max, length = numbreaks))
hmcols<- colorRampPalette(col)(length(bk)-1)
}
else{
rg <- range(Exprs_scale, na.rm=T)
bp <- c((breakratio[1]/sum(breakratio))*diff(rg) - rg_max, rg_max - (breakratio[3]/sum(breakratio))*diff(rg))
bk <- c(seq(-rg_max,bp[1],length=numbreaks), seq(bp[1],bp[2],length=numbreaks),seq(bp[2],rg_max,length=numbreaks))
hmcols<- colorRampPalette(col)(length(bk)-1)
}
heatmap.2(Exprs, Colv=Colv,Rowv=Rowv, dendrogram = dendrogram,trace='none',scale=scale ,density.info='none',
lmat=lmat,lwid=lwid,lhei=lhei,labRow=labRow,labCol=labCol,col=hmcols,breaks=bk,
ColSideColors=colsidebar)
}
breakratio = c(4,1,4))
heatmap.my(as.matrix(data_DE), colsidebar = as.factor(c(rep('T', 3), rep('N',3))),
breakratio = c(4,1,4))
heatmap.my(as.matrix(data_DE), colsidebar = as.factor(c(rep('T', 3), rep('N',3))),
breakratio = c(4,1,4))
heatmap.my(as.matrix(data_DE), colsidebar = as.factor(c(rep('T', 3), rep('N',3))),breakratio = c(4,1,4))
heatmap.my(as.matrix(data_DE), colsidebar = as.factor(c(rep('T', 3), rep('N',3))),breakratio = c(4,1,4))
heatmap.my(as.matrix(log2(data_DE+1), colsidebar = as.factor(c(rep('T', 3), rep('N',3))),breakratio = c(4,1,4))
)
heatmap.my(as.matrix(log2(data_DE+1)), colsidebar = as.factor(c(rep('T', 3), rep('N',3))),breakratio = c(4,1,4))
library(doParallel)
library(doMC)
library(rbenchmark)
library(ggplot2)
cl <- makeCluster(4)
registerDoParallel(cl)
getDoParWorkers()
set.seed(1990)
FUN <- function(x) { round(sqrt(x), 4) }
test1 <- benchmark("lapply" = lapply(1:10, FUN = FUN),
"For loop" = for(i in 1:10){ FUN(i)},
"Foreach dopar" = foreach(i = 1:10) %dopar% FUN(i),
"Foreach do" = foreach(i = 1:10) %do% FUN(i),
"parLapply" = parLapply(cl = cl, X = a, fun = FUN),
"parSapply" = parSapply(cl = cl, X = a, FUN = FUN),
columns=c('test', 'elapsed', 'replications'),
replications = c(100, 200, 500, 1000))
a <- lapply(1:10, function(i) i)
test1 <- benchmark("lapply" = lapply(1:10, FUN = FUN),
"For loop" = for(i in 1:10){ FUN(i)},
"Foreach dopar" = foreach(i = 1:10) %dopar% FUN(i),
"Foreach do" = foreach(i = 1:10) %do% FUN(i),
"parLapply" = parLapply(cl = cl, X = a, fun = FUN),
"parSapply" = parSapply(cl = cl, X = a, FUN = FUN),
columns=c('test', 'elapsed', 'replications'),
replications = c(100, 200, 500, 1000))
ggplot() +
geom_line(aes(x = replications, y = elapsed, colour = test), data = test1)
FUN <- function(x){
a <- matrix(rnorm(10000), 100, 100)
b <- matrix(rnorm(10000), 100, 100)
a * b
}
test2 <- benchmark("lapply" = lapply(1:10, FUN = FUN),
"For loop" = for(i in 1:10){ FUN(i)},
"Foreach dopar" = foreach(i = 1:10) %dopar% FUN(i),
"Foreach do" = foreach(i = 1:10) %do% FUN(i),
"parLapply" = parLapply(cl = cl, X = a, fun = FUN),
"parSapply" = parSapply(cl = cl, X = a, FUN = FUN),
columns=c('test', 'elapsed', 'replications'),
replications = c(100, 200, 500, 1000))
ggplot() +
geom_line(aes(x = replications, y = elapsed, colour = test), data = test2)
FUN <- function(x) {
a <- matrix(rnorm(10000), 100, 100)
b <- matrix(rnorm(10000), 100, 100)
a %*% b
}
test3 <- benchmark("lapply" = lapply(1:10, FUN = FUN),
"For loop" = for(i in 1:10){ FUN(i)},
"Foreach dopar" = foreach(i = 1:10) %dopar% FUN(i),
"Foreach do" = foreach(i = 1:10) %do% FUN(i),
"parLapply" = parLapply(cl = cl, X = a, fun = FUN),
"parSapply" = parSapply(cl = cl, X = a, FUN = FUN),
columns=c('test', 'elapsed', 'replications'),
replications = c(100, 200, 500, 1000))
gplot() +
geom_line(aes(x = replications, y = elapsed, colour = test), data = test3)
ggplot() +
geom_line(aes(x = replications, y = elapsed, colour = test), data = test3)
FUN <- function(x) {
a <- matrix(rnorm(10000), 1000, 10)
b <- matrix(rnorm(10000), 10, 1000)
a %*% b
}
test4 <- benchmark("lapply" = lapply(1:10, FUN = FUN),
"For loop" = for(i in 1:10){ FUN(i)},
"Foreach dopar" = foreach(i = 1:10) %dopar% FUN(i),
"Foreach do" = foreach(i = 1:10) %do% FUN(i),
"parLapply" = parLapply(cl = cl, X = a, fun = FUN),
"parSapply" = parSapply(cl = cl, X = a, FUN = FUN),
columns=c('test', 'elapsed', 'replications'),
replications = c(10, 20, 50, 100))
ggplot() +
geom_line(aes(x = replications, y = elapsed, colour = test), data = test4)
FUN <- function(i) {
ind <- sample(100, 100, replace=TRUE)
result1 <- glm(Species~Sepal.Length, family=binomial(logit), data = iris[ind,])
coefficients(result1)
}
test5 <- benchmark("lapply" = lapply(1:10, FUN = FUN),
"For loop" = for(i in 1:10){ FUN(i)},
"Foreach dopar" = foreach(i = 1:10) %dopar% FUN(i),
"Foreach do" = foreach(i = 1:10) %do% FUN(i),
"parLapply" = parLapply(cl = cl, X = a, fun = FUN),
"parSapply" = parSapply(cl = cl, X = a, FUN = FUN),
columns=c('test', 'elapsed', 'replications'),
replications = c(100, 200, 500, 100))
ggplot() +
geom_line(aes(x = replications, y = elapsed, colour = test), data = test5)
a <- lapply(1:10, function(i) iris)
FUN <- function(x) {
ind <- sample(100, 100, replace=TRUE)
result1 <- glm(Species~Sepal.Length, family=binomial(logit), data = x[ind,])
coefficients(result1)
}
test6 <- benchmark("lapply" = lapply(a, FUN = FUN),
"For loop" = for(i in 1:10){ FUN(a[[i]])},
"Foreach dopar" = foreach(i = 1:10) %dopar% FUN(a[[i]]),
"Foreach do" = foreach(i = 1:10) %do% FUN(a[[i]]),
"parLapply" = parLapply(cl = cl, X = a, fun = FUN),
"parSapply" = parSapply(cl = cl, X = a, FUN = FUN),
columns=c('test', 'elapsed', 'replications'),
replications = c(100, 200, 500, 1000))
ggplot() +
geom_line(aes(x = replications, y = elapsed, colour = test), data = test6)
registerDoMC(cores = 4)
test7 <- benchmark("lapply" = lapply(a, FUN = FUN),
"For loop" = for(i in 1:10){ FUN(a[[i]])},
"Foreach dopar" = foreach(i = 1:10) %dopar% FUN(a[[i]]),
"Foreach do" = foreach(i = 1:10) %do% FUN(a[[i]]),
"parLapply" = parLapply(cl = cl, X = a, fun = FUN),
"parSapply" = parSapply(cl = cl, X = a, FUN = FUN),
columns=c('test', 'elapsed', 'replications'),
replications = c(100, 200, 500, 1000))
ggplot() +
geom_line(aes(x = replications, y = elapsed, colour = test), data = test7)
sessionInfo()
setwd('Dropbox/gitrepository/bringd32biology/RNA-seq/')
shiny::runApp('./')
shiny::runApp('./', launch.browser = T)
shiny::runApp('./', launch.browser = T)
shiny::runApp('./', launch.browser = T)
shiny::runApp('./', launch.browser = T)
library(NetSAM)
?induced.subgraph
?"clusters"
components()
components
R_igraph_clusters
?induced.subgraph
?walktrap.community
g <- make_full_graph(5) %du% make_full_graph(5) %du% make_full_graph(5)
g <- add_edges(g, c(1,6, 1,11, 6, 11))
plot(g)
cluster_walktrap(g)
cluster_walktrap(g, steps = 2)
temp <- cluster_walktrap(g, steps = 2)
temp$modularity
temp$membership
length(temp$membership)
shiny::runApp('./', launch.browser = T)
