hmcols<- colorRampPalette(col)(length(bk)-1)
heatmap.my <- function(Exprs, sel=F, thres_mean, thres_var, numbreaks=100, col = c("blue","white","red"),
breakratio = c(2,1,2), colsidebar, Colv=F, Rowv=T, scale= 'row', labRow=F,
labCol=F, dendrogram = 'row'){
suppressPackageStartupMessages(invisible(require('gplots', quietly=TRUE)))
if(labRow)
labRow <- rownames(Exprs)
if(labCol)
labCol <- colnames(Exprs)
if(sel){
gene_mean <- apply(Exprs,1,mean)
gene_var <- apply(Exprs,1,var)
Exprs <- Exprs[gene_mean>thres_mean & gene_var>thres_var,]
}
if(scale == 'row')
Exprs_scale <- t(scale(t(Exprs)))
else
Exprs_scale <- Exprs
Exprs_scale[is.na(Exprs_scale)] <- min(Exprs_scale, na.rm = TRUE)
# lmat is a matrix describing how the screen is to be broken up. By default, heatmap.2 divides the screen into a four element grid, so lmat is a 2x2 matrix.
# The number in each element of the matrix describes what order to plot the next four plots in. Heatmap.2 plots its elements in the following order:
# 1 Heatmap,
# 2 Row dendrogram,
# 3 Column dendrogram,
# 4 Key
if(missing(colsidebar)){
lmat <- rbind(c(0,4), c(0,3), c(2,1))
lwid <- c(1,4)
lhei <- c(1,0.1,4)
if(class(Colv) == 'dendrogram'){
lhei <- c(1,1,4)
dendrogram <- 'both'
}
}
else{
if(class(Colv) == 'dendrogram'){
# 4 is column dendrogram, 5 is key, 1 is colcolorkey
lmat <- rbind(c(0,5),c(0,4), c(3,2),c(0,1))
lwid <- c(1,4)
lhei <- c(1,1, 4,0.25)
dendrogram <- 'both'
}
else{
if(Colv){
lmat <- rbind(c(0,5),c(0,4), c(3,2),c(0,1))
lwid <- c(1,4)
lhei <- c(1,1, 4,0.25)
dendrogram <- 'both'
}
lmat <- rbind(c(0,5),c(0, 1), c(3,2),c(0,4))
lwid <- c(1,4)
lhei <- c(1,0.25,4,0.1)
}
}
rg <- quantile(Exprs_scale,na.rm=T)
rg_diff <- rg[4]-rg[2]
rg_max <- max(abs(rg))
Exprs_sd <- sd(Exprs_scale)
Exprs_mean <- mean(Exprs_scale)
if(rg_max > max(abs(c(Exprs_mean + 3*Exprs_sd, Exprs_mean - 3*Exprs_sd)))){
rg_iqr <- max(abs(c(rg[2], rg[4])))
bp <- c((breakratio[1]/sum(breakratio))*rg_diff - rg_iqr, rg_iqr - (breakratio[3]/sum(breakratio))*rg_diff)
bk <- unique(c(seq(-rg_max, -rg_iqr, length= numbreaks), seq(-rg_iqr,bp[1],length = numbreaks), seq(bp[1],bp[2],length=numbreaks),seq(bp[2],rg_iqr,length=numbreaks),
seq(rg_iqr, rg_max, length = numbreaks)))
hmcols<- colorRampPalette(col)(length(bk)-1)
}
else{
rg <- range(Exprs_scale, na.rm=T)
bp <- c((breakratio[1]/sum(breakratio))*diff(rg) - rg_max, rg_max - (breakratio[3]/sum(breakratio))*diff(rg))
bk <- c(seq(-rg_max,bp[1],length=numbreaks), seq(bp[1],bp[2],length=numbreaks),seq(bp[2],rg_max,length=numbreaks))
bk <- bk[!duplicated(bk)]
hmcols<- colorRampPalette(col)(length(bk)-1)
}
heatmap.2(Exprs, Colv=Colv,Rowv=Rowv, dendrogram = dendrogram,trace='none',scale=scale ,density.info='none',
lmat=lmat,lwid=lwid,lhei=lhei,labRow=labRow,labCol=labCol,col=hmcols,breaks=bk,
ColSideColors=colsidebar)
}
heatmap.my((dataMat[1:100,1:10]))
heatmap.my(as.matrix((dataMat[1:100,1:10])))
hm <- heatmap.my(as.matrix((dataMat[1:100,1:10])))
str(hm)
plot(hm)
?ggsave
dataMat[1:5, 1:5]
test <- data.frame(s1 = 'MGH264_A01', s2 = 'MGH264_A02')
test
library(GGally)
?ggpairs
ggpairs(dataMat[,1:4])
ggpairs(dataMat[,1:10])
pdf('Desktop/test.pdf')
ggpairs(dataMat[,1:10])
dev.off()
pdf('Desktop/test.pdf')
ggpairs(dataMat[,1:4])
dev.off()
pdf('Desktop/test.pdf')
ggpairs(dataMat[,1:10])
dev.off()
pdf('Desktop/test.pdf')
ggpairs(dataMat[,1:20])
dev.off()
gp <- ggpairs(dataMat[,1:4])
str(gp)
ggsave('Desktop/test.pdf', gp)
?ggpairs
?boxplot()
?boxplot
boxplot(dataMat[,1:4])
?boxplot2
boxplot2(dataMat[,1:4])
geom_boxplot(dataMat[,1:4])
?melt
dataMat <- fread('Desktop/TestData/scRNAseq/GSE57872/data2square.txt', data.table = F)
dataMat1 <- melt(dataMat, id.vars = V1)
dataMat[1:5, 1:4]
dataMat1 <- melt(dataMat, id.vars = IDs)
dataMat1 <- melt(dataMat, id.vars = 1)
head(dataMat1)
ggplot() + geom_boxplot(aes(x = variable, y = value), data = dataMat1)
dataMat1 <- melt(dataMat[,1:5], id.vars = 1)
ggplot() + geom_boxplot(aes(x = variable, y = value), data = dataMat1)
max(dataMat$MGH264_A01)
boxplot(dataMat[,1:4])
boxplot(dataMat[,2:5])
dataMat[1:5, 1:5]
dataMat1 <- melt(dataMat[,1:5], id.vars = 'IDs')
head(dataMat)
head(dataMat1)
library(scatterplot3d)
scatterplot3d(1:10, 1:10, 1:10)
?scatterplot3d
z <- seq(-10, 10, 0.01)
x <- cos(z)
y <- sin(z)
scatterplot3d(x, y, z, highlight.3d=TRUE, col.axis="blue",
col.grid="lightblue", main="scatterplot3d - 1", pch=20)
temp <- seq(-pi, 0, length = 50)
x <- c(rep(1, 50) %*% t(cos(temp)))
y <- c(cos(temp) %*% t(sin(temp)))
z <- c(sin(temp) %*% t(sin(temp)))
scatterplot3d(x, y, z, highlight.3d=TRUE,
col.axis="blue", col.grid="lightblue",
main="scatterplot3d - 2", pch=20)
library(igraph)
?graph_from_edgelist
?forceNetwork
data(MisLinks)
MisLinks
data(MisNodes)
MisNodes
head(MisLinks)
edgeList <- MisLinks
edgeList$source <- MisNodes$name[edgeList$source + 1]
edgeList$target <- MisNodes$name[edgeList$target + 1]
ig <- graph_from_edgelist(edgeList, directed = F)
ig <- graph_from_edgelist(edgeList[,1:2], directed = F)
ig <- graph_from_edgelist(as.matrix(edgeList[,1:2]), directed = F)
plot(ig)
?plot
?igraph
plot(ig, label.cex = 0.5)
plot.igraph(ig, label.cex = 0.5)
?plot.igraph
plot.igraph(ig, width = 2)
?plot.igraph
plot.igraph(ig, vertexwidth = 2)
plot.igraph(ig, vertex.width = 2)
plot.igraph(ig, size = 10)
str(ig)
plot.igraph(ig, vertex.width = 2)
plot(ig, vertex.width = 2)
plot(ig, edge.curved=.1)
plot(ig, vertex.size = 2)
plot(ig, vertex.size = 20)
plot(ig, vertex.size = 20, vertex.label.cex = 0.5)
plot(ig, vertex.size = 20, vertex.label.cex = 0.5,layout=layout_with_fr)
plot(ig, vertex.size = 20, vertex.label.cex = 0.5,layout=layout_with_fr)
plot(ig, vertex.size = 10, vertex.label.cex = 0.5,layout=layout_with_fr)
?plotMA
library(XBSeq)
?MAplot
MAplot
shiny::runApp('Dropbox/gitrepository/bringd32biology/RNA-seq', launch.browser = T)
dataMat1 <- dataMat
dataMat1$IDs <- rownames(dataMat)
dataMat1 <- melt(dataMat1, 'IDs')
gp <- ggplot() + geom_boxplot(aes(x = variable, y = value), data = dataMat1)
gp
head(dataMat1)
shiny::runApp('Dropbox/gitrepository/bringd32biology/RNA-seq', launch.browser = T)
shiny::runApp('Dropbox/gitrepository/bringd32biology/RNA-seq', launch.browser = T)
shiny::runApp('Dropbox/gitrepository/bringd32biology/RNA-seq', launch.browser = T)
MAplot
shiny::runApp('Dropbox/gitrepository/bringd32biology/RNA-seq', launch.browser = T)
?ggpairs
shiny::runApp('Dropbox/gitrepository/bringd32biology/RNA-seq', launch.browser = T)
shiny::runApp('Dropbox/gitrepository/bringd32biology/RNA-seq', launch.browser = T)
dim(dataMat)
dim(dataMat1)
head(dataMat1[,-ncol(dataMat1)])
shiny::runApp('Dropbox/gitrepository/bringd32biology/RNA-seq', launch.browser = T)
MAplot
library(GGally)
shiny::runApp('Dropbox/gitrepository/bringd32biology/RNA-seq', launch.browser = T)
shiny::runApp('Dropbox/gitrepository/bringd32biology/RNA-seq', launch.browser = T)
shiny::runApp('Dropbox/gitrepository/bringd32biology/RNA-seq', launch.browser = T)
shiny::runApp('Dropbox/gitrepository/bringd32biology/RNA-seq', launch.browser = T)
?plot.igraph
shiny::runApp('Dropbox/gitrepository/bringd32biology/RNA-seq', launch.browser = T)
pdf('Desktop/test.pdf')
ggpairs(dataMat[,1:4])
shiny::runApp('Dropbox/gitrepository/bringd32biology/RNA-seq', launch.browser = T)
library(GGally)
?ggpairs
?p_
library(data.table)
dataMat <- fread('Desktop/TestData/scRNAseq/GSE57872/data2square.txt', data.table = F)
dataMat <- dataMat[,-1]
gp <- ggpairs(dataMat[,1:3])
p_(gp)
print(gp)
p_ <- function(pm) {
if (interactive()) {
print(pm)
}
invisible()
}
p_(gp)
shiny::runApp('Dropbox/gitrepository/bringd32biology/RNA-seq', launch.browser = T)
?scatterplot3d
plot(1:5, pch = c(16:20))
shiny::runApp('Dropbox/gitrepository/bringd32biology/RNA-seq', launch.browser = T)
shiny::runApp('Dropbox/gitrepository/bringd32biology/RNA-seq', launch.browser = T)
?plot.igraph
g <- barabasi.game(100)
plot(g, layout=layout_with_fr, vertex.size=4,
vertex.label.dist=0.5, vertex.color="red", edge.arrow.size=0.5)
g <- barabasi.game(100)
plot(g, layout=layout_with_fr, vertex.size=4,
vertex.label.dist=0.5, vertex.color="red", edge.arrow.size=0.5, shape = 'square')
g <- barabasi.game(100)
plot(g, layout=layout_with_fr, vertex.size=4,
vertex.label.dist=0.5, vertex.color="red", edge.arrow.size=0.5, vertex.shape = 'square')
g <- barabasi.game(100)
plot(g, layout=layout_with_fr, vertex.size=4,
vertex.label.dist=0.5, vertex.color="red", edge.arrow.size=0.5, vertex.shape = 'pie')
g <- barabasi.game(100)
plot(g, layout=layout_with_fr, vertex.size=4,
vertex.label.dist=0.5, vertex.color="red", edge.arrow.size=0.5)
pdf('Desktop/p2.pdf')
g <- barabasi.game(100)
plot(g, layout=layout_with_fr, vertex.size=4,
vertex.label.dist=0.5, vertex.color="red", edge.arrow.size=0.5)
dev.off()
?pdf
pdf('Desktop/p2.pdf')
g <- barabasi.game(100)
plot(g, layout=layout_with_fr, vertex.size=4,
vertex.label.dist=0.5, vertex.color="red", edge.arrow.size=0.5, vertex.shape = 'pie')
dev.off()
pdf('Desktop/p2.pdf')
g <- barabasi.game(100)
plot(g, layout=layout_with_fr, vertex.shape = 'pie', vertex.size = 10, vertex.label.cex = 0.5)
dev.off()
pdf('Desktop/p2.pdf')
g <- barabasi.game(100)
plot(g, layout=layout_with_fr, vertex.shape = 'sphere', vertex.size = 10, vertex.label.cex = 0.5)
dev.off()
shapes()
shiny::runApp('Dropbox/gitrepository/bringd32biology/RNA-seq', launch.browser = T)
g <- barabasi.game(100)
plot(g, layout=layout_with_fr, vertex.shape = 'circle', vertex.size = 10, vertex.label.cex = 0.5)
pdf('Desktop/p2.pdf')
g <- barabasi.game(100)
plot(g, layout=layout_with_fr, vertex.shape = 'circle', vertex.size = 10, vertex.label.cex = 0.5)
dev.off()
g <- barabasi.game(100)
plot(g, layout=layout_with_fr, vertex.shape = 'square', vertex.size = 10, vertex.label.cex = 0.5)
g <- barabasi.game(100)
plot(g, layout=layout_with_fr, vertex.shape = 'csquare', vertex.size = 10, vertex.label.cex = 0.5)
g <- barabasi.game(100)
plot(g, layout=layout_with_fr, vertex.shape = 'rectangle', vertex.size = 10, vertex.label.cex = 0.5)
pdf('Desktop/p2.pdf')
g <- barabasi.game(100)
plot(g, layout=layout_with_fr, vertex.shape = 'square', vertex.size = 10, vertex.label.cex = 0.5)
dev.off()
shiny::runApp('Dropbox/gitrepository/bringd32biology/RNA-seq', launch.browser = T)
?forceNetwork
shiny::runApp('Dropbox/gitrepository/bringd32biology/RNA-seq', launch.browser = T)
?zlm.SingleCellAssay
shiny::runApp('Dropbox/gitrepository/bringd32biology/RNA-seq', launch.browser = T)
dataMat <- read.table('Desktop/TestData/RNAseq/allSamples_Genes_ReadCount2.txt', sep = '\t', stringsAsFactors = F, row.names = 1, header =T)
MAST.pfun <- function(counts, group, spikeins, condition_sel){
library(MAST)
registerDoParallel(cores=2)
d <- DGEList(counts = counts, group = group)
d <- calcNormFactors(d)
NormCount <- cpm(d)
if(!is.null(condition_sel))
sample_sel <- c(grep(condition_sel[1], group), grep(condition_sel[2], group))
else
sample_sel <- 1:ncol(counts)
cat('checkpoint4', '\n')
cat('condition:', str(condition_sel), '\n')
str(sample_sel)
str(counts)
str(as.matrix(log2(counts[,sample_sel] + 1)))
scAssay <- FromMatrix('SingleCellAssay', t(as.matrix(log2(counts[,sample_sel] + 1))), cData = data.frame(condition = group[sample_sel], wellKey = colnames(counts)[sample_sel]), fData = data.frame(primerid = rownames(counts)))
zlmCond <- zlm.SingleCellAssay(~condition, scAssay)
cat('checkpoint6', '\n')
contrast <- colnames(zlmCond@coefD)[2]
summaryLrt <- summary(zlmCond, doLRT=contrast)
summaryDt <- summaryLrt
str(summaryDt)
fcHurdle <- merge(summaryDt[contrast==contrast & component=='H',.(primerid, `Pr(>Chisq)`)],
summaryDt[contrast==contrast & component=='logFC', .(primerid, coef, ci.hi, ci.lo)], by='primerid')
TestStat <- data.frame(
AveExpr = apply(NormCount[,sample_sel], 1, mean),
logfc = fcHurdle$coef,
pval = fcHurdle$`Pr(>Chisq)`
)
cat('checkpoint7', '\n')
rownames(TestStat) <- rownames(counts)
colnames(TestStat) <- c('AveExpr',  'logFC', 'p value')
list(
RawCount = counts,
NormCount = NormCount,
Dispersion = c(),
TestStat = TestStat
)
}
res <- MAST.pfun(dataMat, rep(c('C1', 'C2'), each =3), NULL, NULL)
library(doParallel)
res <- MAST.pfun(dataMat, rep(c('C1', 'C2'), each =3), NULL, NULL)
library(edgeR)
res <- MAST.pfun(dataMat, rep(c('C1', 'C2'), each =3), NULL, NULL)
str(res)
dataMat <- fread('Desktop/TestData/scRNAseq/GSE57872/data2square.txt', data.table = F)
dataMat <- dataMat[,-1]
library(data.table)
dataMat <- fread('Desktop/TestData/scRNAseq/GSE57872/data2square.txt', data.table = F)
dataMat <- dataMat[,-1]
res <- MAST.pfun(dataMat[,1:200], rep(c('C1', 'C2'), each =100), NULL, NULL)
res <- MAST.pfun(dataMat[,1:200], rep(c('C1', 'C2'), each =100), NULL, NULL)
sum(is.na(res$TestStat$logFC))
head(res$TestStat)
shiny::runApp('Dropbox/gitrepository/bringd32biology/RNA-seq', launch.browser = T)
group <- rep(c('C1', 'C2'), each = 100)
res <- BPSC.pfun(dataMat[,1:200], group, model.matrix(~group), NULL, NULL)
head(res$TestStat)
head(res$TestStat,100)
group <- rep(c('C1', 'C2'), each = 3)
BPSC.pfun <- function(counts, group, design, spikeins, condition_sel, cores = 2){
# the input of BPSC has to be TPM or
# normlized counts from edgeR
library(BPSC)
library(edgeR)
d <- DGEList(counts = counts, group = group)
d <- calcNormFactors(d)
NormCount <- cpm(d)
if(!is.null(condition_sel))
sample_sel <- c(grep(condition_sel[1], group), grep(condition_sel[2], group))
else
sample_sel <- 1:ncol(counts)
group <- group[sample_sel]
if(!is.null(spikeins)){
counts1 <- rbind(spikeins, counts)
set <- RUVg(as.matrix(counts1), 1:nrow(spikeins), k=1)
Phenod <- data.frame(x = group, weight = set$W[sample_sel])
#rownames(Phenod) <- colnames(counts)
design <- model.matrix(~x + weight, data = Phenod)
}
else
design <- model.matrix(~group)
#Run BPglm for differential expression analysis
registerDoParallel(cores=cores)
res <- BPglm(data=NormCount[,sample_sel], controlIds=which(group==unique(group)[1]), design=design, coef=2, estIntPar=FALSE, useParallel = T)
temp <- data.frame(
c1 = apply(NormCount[,sample_sel][, group == unique(group)[1]], 1, mean),
c2 = apply(NormCount[,sample_sel][, group == unique(group)[2]], 1, mean)
)
TestStat <- data.frame(
AveExpr = apply(NormCount[,sample_sel], 1, mean),
logfc = log2(temp[,1]/temp[,2]),
pval = res$PVAL
)
rownames(TestStat) <- rownames(counts)
colnames(TestStat) <- c('AveExpr',  'logFC', 'p value')
list(
RawCount = counts,
NormCount = NormCount,
Dispersion = c(),
TestStat = TestStat
)
}
res <- BPSC.pfun(dataMat[,1:6], group, model.matrix(~group), NULL, NULL)
head(res$TestStat)
debug(BPSC.pfun)
res <- BPSC.pfun(dataMat[,1:6], group, model.matrix(~group), NULL, NULL)
group
sample_sel
design
?BPglm
which(group==unique(group)[1])
head(NormCount)
str(res)
length(res)
str(res[[1]])
str(res[[2]])
res$PVAL
head(res$PVAL)
head(temp)
head(log2(temp[,1]/temp[,2]))
length(log2(temp[,1]/temp[,2]))
head(TestStat)
group <- rep(c('C1', 'C2'), each = 100)
res <- BPSC.pfun(dataMat[,1:200], group, model.matrix(~group), NULL, NULL)
head(res$PVAL)
b
head(TestStat)
shiny::runApp('Dropbox/gitrepository/bringd32biology/RNA-seq', launch.browser = T)
res <- read.csv('Dropbox/research/RNAseqVis/demo_res/HeteroModule/group1vsOther.csv')
head(res)
res <- read.csv('Dropbox/research/RNAseqVis/demo_res/HeteroModule/group1vsOther.csv', row.names = 1)
head(res)
padj < 0.01)
res_DE <- with(res, AveExpr > median(AveExpr) &
abs(logFC) > 1 &
padj < 0.01)
dim(res_DE)
res_DE <- res[with(res, AveExpr > median(AveExpr) &
abs(logFC) > 1 &
padj < 0.01),]
head(res_DE)
write.csv(res_DE, 'Dropbox/research/RNAseqVis/demo_res/HeteroModule/group1vsOther_DE.csv')
grep('^NA$', rownames(res_DE))
grep('^NA$', rownames(res_DE), value = T)
grep('^NA$', rownames(res), value = T)
?with
padj < 0.01, na.rm =T),]
res_DE <- res[with(res, AveExpr > median(AveExpr) &
abs(logFC) > 1 &
padj < 0.01, na.rm =T),]
grep('^NA$', rownames(res_DE), value = T)
?which
which('NA')
res_DE <- res[which(with(res, AveExpr > median(AveExpr) &
abs(logFC) > 1 &
padj < 0.01)),]
grep('^NA$', rownames(res_DE), value = T)
write.csv(res_DE, 'Dropbox/research/RNAseqVis/demo_res/HeteroModule/group1vsOther_DE.csv')
res <- read.csv('Dropbox/research/RNAseqVis/demo_res/HeteroModule/group2vsOther.csv', row.names = 1)
res_DE <- res[which(with(res, AveExpr > median(AveExpr) &
abs(logFC) > 1 &
padj < 0.01)),]
write.csv(res_DE, 'Dropbox/research/RNAseqVis/demo_res/HeteroModule/group2vsOther_DE.csv')
res <- read.csv('Dropbox/research/RNAseqVis/demo_res/HeteroModule/group3vsOther.csv', row.names = 1)
res_DE <- res[which(with(res, AveExpr > median(AveExpr) &
abs(logFC) > 1 &
padj < 0.01)),]
write.csv(res_DE, 'Dropbox/research/RNAseqVis/demo_res/HeteroModule/group3vsOther_DE.csv')
shiny::runApp('Dropbox/gitrepository/bringd32biology/RNA-seq', launch.browser = T)
shiny::runApp('Dropbox/gitrepository/bringd32biology/RNA-seq', launch.browser = T)
shiny::runApp('Dropbox/gitrepository/bringd32biology/RNA-seq', launch.browser = T)
shiny::runApp('Dropbox/gitrepository/bringd32biology/RNA-seq', launch.browser = T)
shiny::runApp('Dropbox/gitrepository/bringd32biology/RNA-seq', launch.browser = T)
dataMat <- fread('Desktop/TestData/scRNAseq/GSE57872/data2square.txt', data.table = F)
dataMat <- dataMat[,-1]
dataMat[1:5, 1:5]
temp  <- dataMat[1:5, 1:5]
ppoints  <- dataMat[1:5, 1:5]
dp <- dPlot(MGH264_A02 ~ MGH264_A01, data = ppoints)
dp$save('Desktop/test.html', cdn = TRUE)
dp
dp <- dPlot(MGH264_A02 ~ MGH264_A01, data = as.data.frame(ppoints))
dp
?dPlot
dp <- dPlot(MGH264_A02 ~ MGH264_A01, data = as.data.frame(ppoints), type = 'bubble')
do
dp
dp$save('Desktop/test.html', cdn = TRUE)
dp
dp$save('test.html')
pwd()
getwd()
shiny::runApp('Dropbox/gitrepository/bringd32biology/RNA-seq', launch.browser = T)
dataMat <- data.frame(C1 = 1:3, C2 = 4:6)
dataMat
dp <- dPlot(C1 ~ C2, data = dataMat, type = 'buble')
dp
dp <- dPlot(C1 ~ C2, data = dataMat, type = 'bubble')
dp
dp$save('Desktop/test.html')
dp$save('Desktop/test.html', standalone = TRUE)
dp$save('Desktop/test.html', cdn = TRUE)
dp$save('test.html', cdn = TRUE)
sessionInfo()
dp$save('Desktop/test.html', standalone = TRUE)
dp$save('Desktop/test.html')
dp$save('Desktop/test.html', standalone = TRUE)
dp$save('Desktop/test1.html')
dp$save('Desktop/test.html', cdn = TRUE)
shiny::runApp('Dropbox/gitrepository/bringd32biology/RNA-seq', launch.browser = T)
shiny::runApp('Dropbox/gitrepository/bringd32biology/RNA-seq', launch.browser = T)
shiny::runApp('Dropbox/gitrepository/bringd32biology/RNA-seq', launch.browser = T)
shiny::runApp('Dropbox/gitrepository/bringd32biology/RNA-seq', launch.browser = T)
shiny::runApp('Dropbox/gitrepository/bringd32biology/RNA-seq', launch.browser = T)
library(scde)
?scde.error.models
shiny::runApp('Dropbox/gitrepository/bringd32biology/RNA-seq', launch.browser = T)
shiny::runApp('Dropbox/gitrepository/bringd32biology/RNA-seq', launch.browser = T)
