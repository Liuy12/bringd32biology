else if (identical(Colv, "Rowv")) {
if (nr != nc)
stop("Colv = \"Rowv\" but nrow(x) != ncol(x)")
if (exists("ddr")) {
ddc <- ddr
colInd <- order.dendrogram(ddc)
}
else colInd <- rowInd
}
else if (is.integer(Colv)) {
hcc <- hclustfun(distfun(if (symm)
x
else t(x)))
ddc <- as.dendrogram(hcc)
ddc <- reorderfun(ddc, Colv)
colInd <- order.dendrogram(ddc)
if (nc != length(colInd))
stop("column dendrogram ordering gave index of wrong length")
}
else if (isTRUE(Colv)) {
Colv <- colMeans(x, na.rm = na.rm)
hcc <- hclustfun(distfun(if (symm)
x
else t(x)))
ddc <- as.dendrogram(hcc)
ddc <- reorderfun(ddc, Colv)
colInd <- order.dendrogram(ddc)
if (nc != length(colInd))
stop("column dendrogram ordering gave index of wrong length")
}
else {
colInd <- 1:nc
}
retval$rowInd <- rowInd
retval$colInd <- colInd
retval$call <- match.call()
x <- x[rowInd, colInd]
x.unscaled <- x
cellnote <- cellnote[rowInd, colInd]
if (is.null(labRow))
labRow <- if (is.null(rownames(x)))
(1:nr)[rowInd]
else rownames(x)
else labRow <- labRow[rowInd]
if (is.null(labCol))
labCol <- if (is.null(colnames(x)))
(1:nc)[colInd]
else colnames(x)
else labCol <- labCol[colInd]
if (scale == "row") {
retval$rowMeans <- rm <- rowMeans(x, na.rm = na.rm)
x <- sweep(x, 1, rm)
retval$rowSDs <- sx <- apply(x, 1, sd, na.rm = na.rm)
x <- sweep(x, 1, sx, "/")
}
else if (scale == "column") {
retval$colMeans <- rm <- colMeans(x, na.rm = na.rm)
x <- sweep(x, 2, rm)
retval$colSDs <- sx <- apply(x, 2, sd, na.rm = na.rm)
x <- sweep(x, 2, sx, "/")
}
if (missing(breaks) || is.null(breaks) || length(breaks) <
1) {
if (missing(col) || is.function(col))
breaks <- 16
else breaks <- length(col) + 1
}
if (length(breaks) == 1) {
if (!symbreaks)
breaks <- seq(min(x, na.rm = na.rm), max(x, na.rm = na.rm),
length = breaks)
else {
extreme <- max(abs(x), na.rm = TRUE)
breaks <- seq(-extreme, extreme, length = breaks)
}
}
nbr <- length(breaks)
ncol <- length(breaks) - 1
if (class(col) == "function")
col <- col(ncol)
min.breaks <- min(breaks)
max.breaks <- max(breaks)
x[x < min.breaks] <- min.breaks
x[x > max.breaks] <- max.breaks
if (missing(lhei) || is.null(lhei))
lhei <- c(keysize, 4)
if (missing(lwid) || is.null(lwid))
lwid <- c(keysize, 4)
if (missing(lmat) || is.null(lmat)) {
lmat <- rbind(4:3, 2:1)
if (!missing(ColSideColors)) {
if (!is.character(ColSideColors) || length(ColSideColors) !=
nc)
stop("'ColSideColors' must be a character vector of length ncol(x)")
lmat <- rbind(lmat[1, ] + 1, c(NA, 1), lmat[2, ] +
1)
lhei <- c(lhei[1], 0.2, lhei[2])
}
if (!missing(RowSideColors)) {
if (!is.character(RowSideColors) || length(RowSideColors) !=
nr)
stop("'RowSideColors' must be a character vector of length nrow(x)")
lmat <- cbind(lmat[, 1] + 1, c(rep(NA, nrow(lmat) -
1), 1), lmat[, 2] + 1)
lwid <- c(lwid[1], 0.2, lwid[2])
}
lmat[is.na(lmat)] <- 0
}
if (length(lhei) != nrow(lmat))
stop("lhei must have length = nrow(lmat) = ", nrow(lmat))
if (length(lwid) != ncol(lmat))
stop("lwid must have length = ncol(lmat) =", ncol(lmat))
op <- par(no.readonly = TRUE)
on.exit(par(op))
layout(lmat, widths = lwid, heights = lhei, respect = FALSE)
if (!missing(RowSideColors)) {
par(mar = c(margins[1], 0, 0, 0.5))
image(rbind(1:nr), col = RowSideColors[rowInd], axes = FALSE)
}
if (!missing(ColSideColors)) {
par(mar = c(0.5, 0, 0, margins[2]))
image(cbind(1:nc), col = ColSideColors[colInd], axes = FALSE)
}
par(mar = c(margins[1], 0, 0, margins[2]))
x <- t(x)
cellnote <- t(cellnote)
if (revC) {
iy <- nr:1
if (exists("ddr"))
ddr <- rev(ddr)
x <- x[, iy]
cellnote <- cellnote[, iy]
}
else iy <- 1:nr
image(1:nc, 1:nr, x, xlim = 0.5 + c(0, nc), ylim = 0.5 +
c(0, nr), axes = FALSE, xlab = "", ylab = "", col = col,
breaks = breaks, ...)
retval$carpet <- x
if (exists("ddr"))
retval$rowDendrogram <- ddr
if (exists("ddc"))
retval$colDendrogram <- ddc
retval$breaks <- breaks
retval$col <- col
#   if (!invalid(na.color) & any(is.na(x))) {
#     mmat <- ifelse(is.na(x), 1, NA)
#     image(1:nc, 1:nr, mmat, axes = FALSE, xlab = "", ylab = "",
#           col = na.color, add = TRUE)
#   }
if (is.null(srtCol))
axis(1, 1:nc, labels = labCol, las = 2, line = -0.5 +
offsetCol, tick = 0, cex.axis = cexCol, hadj = adjCol[1],
padj = adjCol[2])
else {
if (is.numeric(srtCol)) {
if (missing(adjCol) || is.null(adjCol))
adjCol = c(1, NA)
xpd.orig <- par("xpd")
par(xpd = NA)
xpos <- axis(1, 1:nc, labels = rep("", nc), las = 2,
tick = 0)
text(x = xpos, y = par("usr")[3] - (1 + offsetCol) *
strheight("M"), labels = labCol, adj = adjCol,
cex = cexCol, srt = srtCol)
par(xpd = xpd.orig)
}
else warning("Invalid value for srtCol ignored.")
}
if (is.null(srtRow)) {
axis(4, iy, labels = labRow, las = 2, line = -0.5 + offsetRow,
tick = 0, cex.axis = cexRow, hadj = adjRow[1], padj = adjRow[2])
}
else {
if (is.numeric(srtRow)) {
xpd.orig <- par("xpd")
par(xpd = NA)
ypos <- axis(4, iy, labels = rep("", nr), las = 2,
line = -0.5, tick = 0)
text(x = par("usr")[2] + (1 + offsetRow) * strwidth("M"),
y = ypos, labels = labRow, adj = adjRow, cex = cexRow,
srt = srtRow)
par(xpd = xpd.orig)
}
else warning("Invalid value for srtRow ignored.")
}
if (!is.null(xlab))
mtext(xlab, side = 1, line = margins[1] - 1.25)
if (!is.null(ylab))
mtext(ylab, side = 4, line = margins[2] - 1.25)
if (!missing(add.expr))
eval(substitute(add.expr))
if (!missing(colsep))
for (csep in colsep) rect(xleft = csep + 0.5, ybottom = 0,
xright = csep + 0.5 + sepwidth[1], ytop = ncol(x) +
1, lty = 1, lwd = 1, col = sepcolor, border = sepcolor)
if (!missing(rowsep))
for (rsep in rowsep) rect(xleft = 0, ybottom = (ncol(x) +
1 - rsep) - 0.5, xright = nrow(x) + 1, ytop = (ncol(x) +
1 - rsep) - 0.5 - sepwidth[2], lty = 1, lwd = 1,
col = sepcolor, border = sepcolor)
min.scale <- min(breaks)
max.scale <- max(breaks)
x.scaled <- scale01(t(x), min.scale, max.scale)
if (trace %in% c("both", "column")) {
retval$vline <- vline
vline.vals <- scale01(vline, min.scale, max.scale)
for (i in colInd) {
if (!is.null(vline)) {
abline(v = i - 0.5 + vline.vals, col = linecol,
lty = 2)
}
xv <- rep(i, nrow(x.scaled)) + x.scaled[, i] - 0.5
xv <- c(xv[1], xv)
yv <- 1:length(xv) - 0.5
lines(x = xv, y = yv, lwd = 1, col = tracecol, type = "s")
}
}
if (trace %in% c("both", "row")) {
retval$hline <- hline
hline.vals <- scale01(hline, min.scale, max.scale)
for (i in rowInd) {
if (!is.null(hline)) {
abline(h = i - 0.5 + hline.vals, col = linecol,
lty = 2)
}
yv <- rep(i, ncol(x.scaled)) + x.scaled[i, ] - 0.5
yv <- rev(c(yv[1], yv))
xv <- length(yv):1 - 0.5
lines(x = xv, y = yv, lwd = 1, col = tracecol, type = "s")
}
}
if (!missing(cellnote))
text(x = c(row(cellnote)), y = c(col(cellnote)), labels = c(cellnote),
col = notecol, cex = notecex)
par(mar = c(margins[1], 0, 0, 0))
if (dendrogram %in% c("both", "row")) {
flag <- try(plot.dendrogram(ddr, horiz = TRUE, axes = FALSE,
yaxs = "i", leaflab = "none"))
if ("try-error" %in% class(flag)) {
cond <- attr(flag, "condition")
if (!is.null(cond) && conditionMessage(cond) == "evaluation nested too deeply: infinite recursion / options(expressions=)?")
stop("Row dendrogram too deeply nested, recursion limit exceeded.  Try increasing option(\"expressions\"=...).")
}
}
else plot.new()
par(mar = c(0, 0, if (!is.null(main)) 5 else 0, margins[2]))
if (dendrogram %in% c("both", "column")) {
flag <- try(plot.dendrogram(ddc, axes = FALSE, xaxs = "i",
leaflab = "none"))
if ("try-error" %in% class(flag)) {
cond <- attr(flag, "condition")
if (!is.null(cond) && conditionMessage(cond) == "evaluation nested too deeply: infinite recursion / options(expressions=)?")
stop("Column dendrogram too deeply nested, recursion limit exceeded.  Try increasing option(\"expressions\"=...).")
}
}
else plot.new()
if (!is.null(main))
title(main, cex.main = 1.5 * op[["cex.main"]])
if (key) {
mar <- c(5, 4, 2, 1)
if (!is.null(key.xlab) && is.na(key.xlab))
mar[1] <- 2
if (!is.null(key.ylab) && is.na(key.ylab))
mar[2] <- 2
if (!is.null(key.title) && is.na(key.title))
mar[3] <- 1
par(mar = mar, cex = 0.75, mgp = c(2, 1, 0))
if (length(key.par) > 0)
do.call(par, key.par)
tmpbreaks <- breaks
if (symkey) {
max.raw <- max(abs(c(x, breaks)), na.rm = TRUE)
min.raw <- -max.raw
tmpbreaks[1] <- -max(abs(x), na.rm = TRUE)
tmpbreaks[length(tmpbreaks)] <- max(abs(x), na.rm = TRUE)
}
else {
min.raw <- min(x, na.rm = TRUE)
max.raw <- max(x, na.rm = TRUE)
}
z <- seq(min.raw, max.raw, length = length(col))
image(z = matrix(z, ncol = 1), col = col, breaks = tmpbreaks,
xaxt = "n", yaxt = "n")
par(usr = c(0, 1, 0, 1))
if (is.null(key.xtickfun)) {
lv <- pretty(breaks)
xv <- scale01(as.numeric(lv), min.raw, max.raw)
xargs <- list(at = xv, labels = lv)
}
else {
xargs <- key.xtickfun()
}
xargs$side <- 1
do.call(axis, xargs)
if (is.null(key.xlab)) {
if (scale == "row")
key.xlab <- "Row Z-Score"
else if (scale == "column")
key.xlab <- "Column Z-Score"
else key.xlab <- "Value"
}
if (!is.na(key.xlab)) {
mtext(side = 1, key.xlab, line = par("mgp")[1], padj = 0.5)
}
if (density.info == "density") {
dens <- density(x, adjust = densadj, na.rm = TRUE)
omit <- dens$x < min(breaks) | dens$x > max(breaks)
dens$x <- dens$x[-omit]
dens$y <- dens$y[-omit]
dens$x <- scale01(dens$x, min.raw, max.raw)
lines(dens$x, dens$y/max(dens$y) * 0.95, col = denscol,
lwd = 1)
if (is.null(key.ytickfun)) {
yargs <- list(at = pretty(dens$y)/max(dens$y) *
0.95, labels = pretty(dens$y))
}
else {
yargs <- key.ytickfun()
}
yargs$side <- 2
do.call(axis, yargs)
if (is.null(key.title))
key.title <- "Color Key\nand Density Plot"
if (!is.na(key.title))
title(key.title)
par(cex = 0.5)
if (is.null(key.ylab))
key.ylab <- "Density"
if (!is.na(key.ylab))
mtext(side = 2, key.ylab, line = par("mgp")[1],
padj = 0.5)
}
else if (density.info == "histogram") {
h <- hist(x, plot = FALSE, breaks = breaks)
hx <- scale01(breaks, min.raw, max.raw)
hy <- c(h$counts, h$counts[length(h$counts)])
lines(hx, hy/max(hy) * 0.95, lwd = 1, type = "s",
col = denscol)
if (is.null(key.ytickfun)) {
yargs <- list(at = pretty(hy)/max(hy) * 0.95,
labels = pretty(hy))
}
else {
yargs <- key.ytickfun()
}
yargs$side <- 2
do.call(axis, yargs)
if (is.null(key.title))
key.title <- "Color Key\nand Histogram"
if (!is.na(key.title))
title(key.title)
par(cex = 0.5)
if (is.null(key.ylab))
key.ylab <- "Count"
if (!is.na(key.ylab))
mtext(side = 2, key.ylab, line = par("mgp")[1],
padj = 0.5)
}
else if (is.null(key.title))
title("Color Key")
if (trace %in% c("both", "column")) {
vline.vals <- scale01(vline, min.raw, max.raw)
if (!is.null(vline)) {
abline(v = vline.vals, col = linecol, lty = 2)
}
}
if (trace %in% c("both", "row")) {
hline.vals <- scale01(hline, min.raw, max.raw)
if (!is.null(hline)) {
abline(v = hline.vals, col = linecol, lty = 2)
}
}
}
else plot.new()
retval$colorTable <- data.frame(low = retval$breaks[-length(retval$breaks)],
high = retval$breaks[-1], color = retval$col)
if (!is.null(extrafun))
extrafun()
invisible(retval)
}
heatmap.my(as.matrix(data_DE),colsidebar = as.factor(c(rep('T', 3), rep('N', 3))),
sdfas
)
heatmap.my(as.matrix(data_DE),colsidebar = as.factor(c(rep('T', 3), rep('N', 3))),
breakratio = c(2,1,2))
library(gplots)
heatmap.my(as.matrix(data_DE),colsidebar = as.factor(c(rep('T', 3), rep('N', 3))),
breakratio = c(2,1,2))
heatmap.my(as.matrix(data_DE),colsidebar = as.factor(c(rep('T', 3), rep('N', 3))),
breakratio = c(2,1,2))
library(gplots)
heatmap.my(as.matrix(data_DE),colsidebar = as.factor(c(rep('T', 3), rep('N', 3))),
breakratio = c(2,1,2))
library(devtools)
install_github("liuy12/MBDDiff")
library(BiocInstaller)
biocLite('XBSeq')
biocLite('XBSeq')
install_github('liuy12/XBSeq')
install_github("liuy12/MBDDiff")
library(MBDDiff)
Promoter_anno <- GetPromoterAnno('hg38')
bed_100bp_bg <- IdentifyBackground(organism = 'hg38', bed_path = '../Desktop/', binsize = 100, promo_bed = Promoter_anno, cores = 4)
biocLite('XBSeqw')
biocLite('XBSeq')
library(Biocinstaller)
.libPaths()
library(Biocinstaller)
.libPaths()
library(Biocinstaller)
library(BiocInstaller)
biocLite('XBSeq')
install.packages('XBSeq')
biocLite('XBSeq')
biocLite(XBSeq)
biocLite('XBSeq')
source("https://bioconductor.org/biocLite.R")
?BiocUpgrade
biocLite("BiocUpgrade")
biocLite('XBSeq')
library(XBSeq)
library(MBDDiff)
library(Biostrings)
?leletterFrequency
?letterFrequency
Freqmat <- data.frame()
Freqmat$CG <- c(1,2,3,4)
Freqmat <- data.frame(CD, MD)
Freqmat <- data.frame("DA")
Freqmat
Freqmat <- data.frame(CG = numeric(0), ATCG = numeric(0))
Freqmat
Freqmat$CG <- c(1,2,3)
Freqmat <- data.frame(matrix(NA, nrow = 10, ncol = 2))
Freqmat
?filter
library(dplyr)
?rename
dataMat <- data.frame(a = c(1:10), b = c(21:30))
dataMat
names(dataMat)
rename(dataMat , names(dataMat) = c("A", "B"))
rename(dataMat, setNames(names(dataMat), c("A", "B")))
dataMat %>% rename(setNames(names(.), c("A", "B")))
dataMat %>% rename(.dot = setNames(names(.), c("A", "B")))
library(data.table)
?setnames
?bind_cols
slice(dataMat, -c(1:2))
dataMat
?slice
?makeCluster
?fread
?hclust
?dist
hc <- hclust(dist(USArrests), "ave")
dim(USArrests)
head(USArrests)
library(slidify)
slidify('../Dropbox/gitrepository/bringd32biology/RNA-seq/www/report/user/user1/Report.Rmd')
slidify('../Dropbox/gitrepository/bringd32biology/RNA-seq/www/report/user/user1/Reports.Rmd')
alterPolyA <- as.data.frame(alterPolyA)
max(3,4,2,)
max(3,4,2)
library(xlsx)
install.packages('xlsx')
library(xlsx)
dataMat <- read.xlsx('../Downloads/Files/ClearCell HCC lncRNA ExpressionData-2016-6-27-Ad Vs Tumor.xlsx')
dataMat <- read.xlsx('../Downloads/Files/ClearCell HCC lncRNA ExpressionData-2016-6-27-Ad Vs Tumor.xlsx', sheetIndex = 1)
dataMat <- read.xlsx2('../Downloads/Files/ClearCell HCC lncRNA ExpressionData-2016-6-27-Ad Vs Tumor.xlsx', sheetIndex = 1)
dir(dataMat)
str(dataMat)
head(dataMat)
str(dataMat)
dataMat <- read.xlsx2('../Downloads/Files/ClearCell HCC lncRNA ExpressionData-2016-6-27-Ad Vs Tumor.xlsx', sheetIndex = 1, colClasses = c('character', rep('numeric', 12)))
str(dataMat)
dataMat1 <- read.xlsx('../Downloads/Files/MITranscriptome-ccRCC-page-3 together.xlsx', sheetIndex = 1)
dataMat1 <- read.xlsx2('../Downloads/Files/MITranscriptome-ccRCC-page-3 together.xlsx', sheetIndex = 1)
head(dataMat1)
dataMat1 <- read.xlsx2('../Downloads/Files/MITranscriptome-ccRCC-page-3 together.xlsx', sheetIndex = 1, startRow = 2)
head(dataMat1)
str(dataMat1)
dataMat1 <- read.xlsx2('../Downloads/Files/MITranscriptome-ccRCC-page-3 together.xlsx', sheetIndex = 1, startRow = 1)
str(dataMat1)
dataMat1 <- read.xlsx2('../Downloads/Files/MITranscriptome-ccRCC-page-3 together.xlsx', sheetIndex = 1, header = F)
dataMat1 <- read.xlsx2('../Downloads/Files/MITranscriptome-ccRCC-page-3 together.xlsx', sheetIndex = 1, header = F, colIndex = 2)
str(dataMat1)
dataMat1 <- read.xlsx2('../Downloads/Files/MITranscriptome-ccRCC-page-3 together.xlsx', sheetIndex = 1)
str(dataMat1)
dataMat1 <- read.xlsx2('../Downloads/Files/MITranscriptome-ccRCC-page-3 together.xlsx', sheetIndex = 1, startRow = 2)
str(dataMat1)
str(dataMat1)
intersect(dataMat$ProbeIDs, dataMat1$MALAT1.1)
intersect(as.character(dataMat$ProbeIDs), as.character(dataMat1$MALAT1.1))
length(intersect(as.character(dataMat$ProbeIDs), as.character(dataMat1$MALAT1.1)))
colnames(dataMat1)
dataMat1 <- rbind(dataMat1, colnames(ddataMat))
dataMat1 <- rbind(dataMat1, colnames(dataMat1))
head(ddataMat)
head(dataMat1)
tail(dataMat1)
dataMat1 <- read.xlsx2('../Downloads/Files/MITranscriptome-ccRCC-page-3 together.xlsx', sheetIndex = 1, startRow = 2)
dataMat1$MALAT1.1 <- as.character(dataMat1$MALAT1.1)
str(dataMat1)
dataMat1 <- rbind(dataMat1, colnames(dataMat1))
tail(dataMat1)
intersect(dataMat$ProbeIDs, dataMat1$MALAT1.1)
library(gdata)
dataMat <- read.xls('../Downloads/Files/ClearCell HCC lncRNA ExpressionData-2016-6-27-Ad Vs Tumor.xlsx', sheetIndex = 1, colClasses = c('character', rep('numeric', 12)))
write.table(NearbyGenes_all, 'results/SNP_Nearbygenes_all_500kb_WHR.txt', sep='\t', row.names = F)
setwd('../Dropbox/gitrepository/bringd32biology/RNA-seq/')
shiny::runApp('.', launch.browser = T)
